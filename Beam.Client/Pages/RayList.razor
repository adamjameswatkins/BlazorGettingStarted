@page "/frequency/{id:int}"
@inject IDataService data
@inject IJSRuntime jsRuntime

<RayInput @bind-newRay="newRay" RayCast="@RayCast"/>

<div class="spinner-border" role="status" hidden="@hideLoading">
    <span class="sr-only">Loading...</span>
</div>
<div @ref="rayListContainer">
    @foreach (var ray in data.Rays)
    {
        <p>
            <RayItem ray="@ray" />
        </p>
    } 
</div>

@code{
    [Parameter]
    public int Id { get; set; }

    ElementReference rayListContainer;

    public RayToCast newRay { get; set; } = new RayToCast();

    public bool hideLoading { get; set; } = false;

    object[] keyFrames = new[]
    {
        new {opacity = 0.0, offset = 0.0},
        new {opacity = 0.9, offset = 0.6},
        new {opacity = 1.0, offset = 1.0}
    };

    bool rayCastCalled;

    protected override void OnParametersSet()
    {
        data.UpdatedRays += UpdateForNewRays;
        data.SelectedFrequency = Id;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(rayCastCalled)
        {
            await jsRuntime.InvokeVoidAsync("UIHelpers.animateElement", rayListContainer, keyFrames, 2000);
            rayCastCalled = false;
        }
    }

    void UpdateForNewRays()
    {
        this.hideLoading = true;
        if (!data.Rays.Any(r => r.UserName == data.CurrentUser.Name))
        {
            newRay.Text = $"Hello, My Name is {data.CurrentUser.Name}";
        }
        StateHasChanged();
    }

    void RayCast()
    {
        this.hideLoading = false;
        this.rayCastCalled = true;
    }
}
