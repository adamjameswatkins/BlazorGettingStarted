@inherits TestComponentBase
@code
{
    private TestDataService dataService;
    private MockJsRuntimeInvokeHandler jsMock;
    private void RayInputServiceSetup(TestServiceProvider services)
    {
        jsMock = services.AddMockJsRuntime();
        dataService = new TestDataService();
        services.AddSingleton<IDataService>(dataService);
        services.AddSingleton<ILocalStorageService, TestLocalStorage>();
    }
}


<SnapshotTest Description="Ray Input With Parameter" Setup="@Setup">
    <TestInput>
        <RayInput newRay="@(new RayToCast() {Text = "test text"})"/>
    </TestInput>
    <ExpectedOutput>
        <p></p>
        <Card Title="Cast a New Ray">
            <form>
                <div class="input-group">
                    <textarea class="form-control valid" value="test text" ></textarea>
                    <div diff:ignore=""></div>
                </div>
            </form>
        </Card>
        <p></p>
    </ExpectedOutput>
    @code
    {
        void Setup(SnapshotTest test)
        {
            RayInputServiceSetup(test.Services);
        }
    }
</SnapshotTest>

<Fixture Description="Ray Not Created for empty Input" Test="EmptyInputDoesntCreate">
    <ComponentUnderTest>
        <RayInput newRay="@(new RayToCast())"/>
    </ComponentUnderTest>
    <Fragment>
        <p></p>
        <Card Title="Cast a New Ray">
            <form>
                <div class="input-group">
                    <textarea class="form-control invalid" value="" ></textarea>
                    <div diff:ignore=""></div>
                </div>
                <div class="validation-message">You can't send an empty Ray!</div>
            </form>
        </Card>
        <p></p>
    </Fragment>
</Fixture>
@code
{
    void EmptyInputDoesntCreate(Fixture fixture)
    {
        // Arrange
        RayInputServiceSetup(fixture.Services);
        var cut = fixture.GetComponentUnderTest<RayInput>();

        bool updateTriggered = false;
        dataService.UpdatedRays += () => updateTriggered = true;

        // Act - click button to add Frequncy
        cut.Find("form").Submit();

        // Assert that the counter was incremented
        var expected = fixture.GetFragment();
        Assert.False(updateTriggered);
        cut.MarkupMatches(expected);
    }
}

<Fixture Description="Ray Created with Valid Input" Test="ValidInputCallsCreate">
    <ComponentUnderTest>
        <RayInput newRay="@(new RayToCast(){ Text = "Test" })"/>
    </ComponentUnderTest>
    <Fragment>
        <p></p>
        <Card Title="Cast a New Ray">
            <form>
                <div class="input-group">
                    <textarea class="form-control valid" value="" ></textarea>
                    <div diff:ignore=""></div>
                </div>
            </form>
        </Card>
        <p></p>
    </Fragment>
</Fixture>
@code
{
    void ValidInputCallsCreate(Fixture fixture)
    {
        // Arrange
        RayInputServiceSetup(fixture.Services);
        var cut = fixture.GetComponentUnderTest<RayInput>();

        bool updateTriggered = false;
        dataService.UpdatedRays += () => updateTriggered = true;

        // Act - click button to add Frequncy
        cut.Find("form").Submit();

        // Assert that the counter was incremented
        var expected = fixture.GetFragment();
        Assert.True(updateTriggered);
        cut.MarkupMatches(expected);
    }
}

<Fixture Description="Element focus calls are made against javascript" Test="ValidJavascriptFocus">
    <ComponentUnderTest>
        <RayInput newRay="@(new RayToCast(){ Text = "Test" })"/>
    </ComponentUnderTest>
</Fixture>
@code
{
    void ValidJavascriptFocus(Fixture fixture)
    {
        // Arrange
        RayInputServiceSetup(fixture.Services);
        var cut = fixture.GetComponentUnderTest<RayInput>();

        // Act

        // Assert

        var focusElement = cut.Find("div.input-group");

        jsMock.VerifyInvoke("UIHelpers.focusFirstChild")
        .Arguments.Single().ShouldBeElementReferenceTo(focusElement);
    }
}